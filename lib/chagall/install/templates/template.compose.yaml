x-docker-environment: &docker-environment
  <% if services.each do |service| %>
  <%= service[:docker_env] if service[:docker_env] %>
  <% end %>
  HISTFILE: tmp/.docker_shell_history
  PRY_HISTFILE: tmp/.docker_pry_history
  RAILS_LOG_TO_STDOUT: true

x-app: &app
  image: <%= @app_name %>:development
  environment:
    <<: *docker-environment
  build:
    context: .
    target: development
  working_dir: /app
  env_file:
    - .env
  stdin_open: true
  ports:
    - ${PORT:-3000}:${PORT:-3000}
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  tmpfs:
    - /app/tmp/pids
  volumes:
    - .:/app:c
    - cache:/app/tmp/cache:d
    - bundle:/usr/local/bundle:d
    - node_modules:/app/node_modules:d

services:
  app: &app
    command: bin/dev

  <%- if @services.include?('postgres') -%>
  postgres:
    image: postgres:<%= @versions['postgres'] %>
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: 0.0.0.0
    volumes:
      - postgres:/var/lib/postgresql/data:c
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h postgres -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
  <%- end -%>

  <%- if services.include?('redis') -%>
  redis:
    image: redis:<%= @versions['redis'] %>
    volumes:
      - redis:/data:delegated
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    entrypoint: redis-server --appendonly yes
  <%- end -%>

  prod:
    <<: *app
    image: <%= @app_name %>:production
    environment:
      <<: *docker-environment
      RAILS_ENV: production
      RACK_ENV: production
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "http://prod:3000/health"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: vip
      update_config:
        parallelism: 1
        order: start-first
        delay: 5s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    volumes:
      - cache:/app/tmp/cache:d

  reproxy:
    image: umputun/reproxy
    profiles:
      - prod
    ports:
      - 80:8080
      - 443:8443
    environment:
      SSL_TYPE: auto
      SSL_ACME_FQDN: domain.com
      SSL_ACME_LOCATION: /srv/var/acme
      SSL_ACME_EMAIL: mail@example.com
      FILE_ENABLED: true
    volumes:
      - ./config/reproxy.conf:/srv/reproxy.yml
      - certs:/srv/var/acme

volumes:
  postgres:
  redis:
  bundle:
  node_modules:
  cache: