#!/bin/bash

set -e pipefail

# Test utilities
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

pass() {
    echo -e "${GREEN}✓ $1${NC}"
}

fail() {
    echo -e "${RED}✗ $1${NC}"
    exit 1
}

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

setup() {
    # Get the absolute path to the project root directory
    PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

    # Create test directory inside tmp
    TEST_DIR="$PROJECT_ROOT/tmp/test_$(date +%s)"
    mkdir -p "$TEST_DIR" || fail "Failed to create test directory"

    log_info "Project root: $PROJECT_ROOT"
    log_info "Test directory: $TEST_DIR"
    
    # Move to test directory
    cd "$TEST_DIR" || fail "Failed to enter test directory"

    # Clone the test project
    if ! git clone https://github.com/frontandstart/initapp-rails.git .; then
        fail "Failed to clone test project"
    fi

    # Simulate curl installation
    log_info "Installing from local script..."
    cat "$PROJECT_ROOT/lib/install" > "./install" || fail "Failed to copy install script"
    chmod +x "./install" || fail "Failed to make install script executable"

    # Source the install script
    log_info "Sourcing install script..."
    source "./install" || fail "Failed to source install script"
}

teardown() {
    # if [ -n "$TEST_DIR" ]; then
    #     log_info "Cleaning up..."
        
    #     # Clean up Docker resources
    #     docker compose down -v 2>/dev/null || true
        
    #     # Return to project root and clean up test directory
    #     cd "$PROJECT_ROOT" || true
    #     rm -rf "$TEST_DIR" || true
    # fi
    
    # Clear environment variables
    unset NONINTERACTIVE
    unset AUTO_YES
    unset DEFAULT_APP_NAME
}

test_all_yes() {
    log_info "Testing scenario: Accept all services..."
    
    export NONINTERACTIVE=true
    export AUTO_YES=true
    export DEFAULT_APP_NAME="initapp-yes"
    
    main
    
    # Verify all services are included
    local required_services=("postgres" "redis" "sidekiq" "mailcatcher")
    for service in "${required_services[@]}"; do
        if ! grep -q "^  ${service}:" compose.yaml; then
            fail "Service '${service}' should be present in YES scenario"
        fi
    done
    
    pass "All services scenario passed"
}

test_all_no() {
    log_info "Testing scenario: Reject all services..."
    
    export NONINTERACTIVE=true
    export AUTO_YES=false
    export DEFAULT_APP_NAME="initapp-no"
    
    main
    
    # Verify no optional services are included
    local excluded_services=("postgres" "redis" "sidekiq" "mongodb" "elasticsearch")
    for service in "${excluded_services[@]}"; do
        if grep -q "^  ${service}:" compose.yaml; then
            fail "Service '${service}' should not be present in NO scenario"
        fi
    done
    
    pass "No services scenario passed"
}

test_compose_validation() {
    log_info "Testing compose file validation..."
    
    # Test YES scenario
    export NONINTERACTIVE=true
    export AUTO_YES=true
    export DEFAULT_APP_NAME="initapp-validate"
    
    main
    
    if ! docker compose config > /dev/null 2>&1; then
        fail "Invalid compose.yaml in YES scenario"
    fi
    
    pass "Compose validation passed"
}

test_services_startup() {
    log_info "Testing services startup..."
    
    # Use YES scenario for startup test
    export NONINTERACTIVE=true
    export AUTO_YES=true
    export DEFAULT_APP_NAME="initapp-startup"
    
    main
    
    if ! docker compose up -d; then
        fail "Failed to start services"
    fi
    
    # Wait for services to be healthy
    local timeout=60
    local elapsed=0
    while [ $elapsed -lt $timeout ]; do
        if docker compose ps | grep -q "healthy"; then
            docker compose down -v
            pass "Services started successfully"
            return
        fi
        sleep 1
        ((elapsed++))
    done
    
    docker compose logs
    docker compose down -v
    fail "Services failed to become healthy within ${timeout} seconds"
}

main() {
    echo "Starting tests..."
    
    trap teardown EXIT
    
    setup
    
    # Run test scenarios
    test_all_yes
    test_all_no
    test_compose_validation
    test_services_startup
    
    echo "All tests passed!"
}

main